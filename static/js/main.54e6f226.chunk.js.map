{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","components/NewCommentForm.tsx","utils/fetchClient.ts","components/PostDetails.tsx","App.tsx","api.tsx","components/UserSelector.tsx","index.tsx"],"names":["PostsList","posts","openedPostId","openPost","className","map","post","id","title","type","classNames","onClick","postId","isOpenedModal","Loader","NewCommentForm","addComment","isCommentsAdding","useState","name","setName","isNameError","setIsNameError","email","setEmail","isEmailError","setIsEmailError","comment","setComment","isCommentError","setIsCommentError","onChange","event","target","value","htmlFor","placeholder","preventDefault","body","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","JSON","stringify","headers","then","fetch","response","json","Error","client","PostDetails","openedPost","comments","setComments","isNewCommentForm","setIsNewCommentForm","isCommentsLoading","setIsCommentsLoading","isCommentsLoaded","setIsCommentsLoaded","setIsCommentsAdding","None","error","setError","onDelete","comId","oldComments","filter","comm","length","NoCommentsError","catch","CommentsLoadingError","loadCommentsOfUser","getComments","res","finally","useEffect","href","newComment","UserSelector","users","selectedUserId","setSelectedUserId","loadPostsOfUser","clearError","isDropdownActive","setIsDropdownActive","selectedUserName","setSelectedUserName","prev","role","hidden","user","App","setUsers","setPosts","setOpenedPostId","setOpenedPost","isPostsLoading","setIsPostLoading","isPostsLoaded","setIsPostLoaded","userId","getPosts","NoPostsError","PostsLoadingError","find","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.54e6f226.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[],\n  openedPostId: number | null,\n  openPost: (postId: number | null) => void,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  openedPostId,\n  openPost,\n}) => {\n  const onClickPost = (postId: number, isOpenedModal: boolean) => {\n    if (isOpenedModal) {\n      openPost(null);\n    } else {\n      openPost(postId);\n    }\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => (\n            <tr data-cy=\"Post\" key={post.id}>\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={classNames(\n                    'button',\n                    'is-link',\n                    { 'is-light': openedPostId !== post.id },\n                  )}\n                  onClick={() => onClickPost(post.id, openedPostId === post.id)}\n                >\n                  {openedPostId === post.id\n                    ? 'Close'\n                    : 'Open'}\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  postId: number,\n  addComment: (newComment: Omit<Comment, 'id'>) => void,\n  isCommentsAdding: boolean,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  postId,\n  addComment,\n  isCommentsAdding,\n}) => {\n  const [name, setName] = useState('');\n  const [isNameError, setIsNameError] = useState(false);\n  const [email, setEmail] = useState('');\n  const [isEmailError, setIsEmailError] = useState(false);\n  const [comment, setComment] = useState('');\n  const [isCommentError, setIsCommentError] = useState(false);\n  const onAdd = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    event?.preventDefault();\n    if (!name) {\n      setIsNameError(true);\n\n      return;\n    }\n\n    if (!email) {\n      setIsEmailError(true);\n\n      return;\n    }\n\n    if (!comment) {\n      setIsCommentError(true);\n\n      return;\n    }\n\n    const newComment = {\n      postId,\n      name,\n      email,\n      body: comment,\n    };\n\n    addComment(newComment);\n  };\n\n  const onClear = () => {\n    setName('');\n    setEmail('');\n    setComment('');\n    setIsNameError(false);\n    setIsEmailError(false);\n    setIsCommentError(false);\n  };\n\n  const onChange = (\n    event: React.ChangeEvent<HTMLInputElement>\n    | React.ChangeEvent<HTMLTextAreaElement>,\n  ) => {\n    switch (event.target.name) {\n      case 'name':\n        setName(event.target.value);\n        setIsNameError(false);\n        break;\n      case 'email':\n        setEmail(event.target.value);\n        setIsEmailError(false);\n        break;\n      case 'body':\n        setComment(event.target.value);\n        setIsCommentError(false);\n        break;\n      default:\n        break;\n    }\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\">\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames(\n              'input',\n              { 'is-danger': isNameError },\n            )}\n            value={name}\n            onChange={onChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {isNameError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isNameError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames(\n              'input',\n              { 'is-danger': isEmailError },\n            )}\n            value={email}\n            onChange={onChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {isEmailError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isEmailError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames(\n              'textarea',\n              { 'is-danger': isCommentError },\n            )}\n            value={comment}\n            onChange={onChange}\n          />\n        </div>\n\n        {isCommentError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button',\n              'is-link',\n              { 'is-loading': isCommentsAdding },\n            )}\n            onClick={onAdd}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={onClear}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Post } from '../types/Post';\nimport { getComments, deleteComment, postComment } from '../api';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  openedPost: Post;\n};\n\nenum Error {\n  None,\n  CommentsLoadingError,\n  NoCommentsError,\n}\n\nexport const PostDetails: React.FC<Props> = ({\n  openedPost,\n}) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isNewCommentForm, setIsNewCommentForm] = useState(false);\n  const [isCommentsLoading, setIsCommentsLoading] = useState(false);\n  const [isCommentsLoaded, setIsCommentsLoaded] = useState(false);\n  const [isCommentsAdding, setIsCommentsAdding] = useState(false);\n  const [error, setError] = useState<Error>(Error.None);\n\n  const addComment = (newComment: Omit<Comment, 'id'>) => {\n    setIsCommentsAdding(true);\n    postComment(newComment)\n      .then((res) => {\n        setComments((oldComments) => (\n          [...oldComments, res]\n        ));\n        setError(Error.None);\n        setIsCommentsAdding(false);\n      })\n      .catch(() => {\n        setError(Error.CommentsLoadingError);\n        setIsCommentsAdding(false);\n        setTimeout(() => {\n          setError(Error.None);\n        }, 3000);\n      });\n  };\n\n  const onDelete = (id: number) => {\n    deleteComment(id)\n      .then(() => {\n        setComments((oldComments) => (\n          oldComments.filter(comm => (\n            comm.id !== id\n          ))\n        ));\n        setError(Error.None);\n\n        if (!comments.length) {\n          setError(Error.NoCommentsError);\n          setIsCommentsLoaded(false);\n        }\n      })\n      .catch(() => {\n        setError(Error.CommentsLoadingError);\n        setTimeout(() => {\n          setError(Error.None);\n        }, 3000);\n      });\n  };\n\n  const loadCommentsOfUser = (postId: number) => {\n    setIsCommentsLoading(true);\n    setIsCommentsLoaded(false);\n    getComments(postId)\n      .then(res => {\n        setComments(res);\n        setIsCommentsLoaded(true);\n\n        if (!res.length) {\n          setError(Error.NoCommentsError);\n          setIsCommentsLoaded(false);\n        }\n      })\n      .catch(() => {\n        setError(Error.CommentsLoadingError);\n        setComments([]);\n      })\n      .finally(() => {\n        setIsCommentsLoading(false);\n      });\n  };\n\n  useEffect(() => {\n    loadCommentsOfUser(openedPost.id);\n  }, [openedPost]);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${openedPost.id}: ${openedPost.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {openedPost.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isCommentsLoading && <Loader />}\n\n          {error === Error.CommentsLoadingError && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {error === Error.NoCommentsError\n          && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {isCommentsLoaded && (\n            <>\n              <p className=\"title is-4\">Comments:</p>\n              {comments.map(comment => (\n                <article\n                  className=\"message is-small\"\n                  data-cy=\"Comment\"\n                  key={comment.id}\n                >\n                  <div className=\"message-header\">\n                    <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                      {comment.name}\n                    </a>\n                    <button\n                      data-cy=\"CommentDelete\"\n                      type=\"button\"\n                      className=\"delete is-small\"\n                      aria-label=\"delete\"\n                      onClick={() => onDelete(comment.id)}\n                    >\n                      delete button\n                    </button>\n                  </div>\n\n                  <div className=\"message-body\" data-cy=\"CommentBody\">\n                    {comment.body}\n                  </div>\n                </article>\n              ))}\n            </>\n          )}\n\n          {!isNewCommentForm && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => setIsNewCommentForm(true)}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {isNewCommentForm && (\n          <NewCommentForm\n            postId={openedPost.id}\n            addComment={addComment}\n            isCommentsAdding={isCommentsAdding}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { getUsers, getPosts } from './api';\nimport { Loader } from './components/Loader';\n\nenum Error {\n  None,\n  PostsLoadingError,\n  NoPostsError,\n}\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [selectedUserId, setSelectedUserId] = useState<number | null>(null);\n  const [openedPostId, setOpenedPostId] = useState<number | null>(null);\n  const [openedPost, setOpenedPost] = useState<Post | null>(null);\n  const [isPostsLoading, setIsPostLoading] = useState(false);\n  const [isPostsLoaded, setIsPostLoaded] = useState(false);\n  const [error, setError] = useState<Error>(Error.None);\n\n  const selectUserId = (id: number) => {\n    setSelectedUserId(id);\n  };\n\n  const openPost = (postId: number | null) => {\n    setOpenedPostId(postId);\n    setOpenedPost(posts.find(post => post.id === postId) || null);\n  };\n\n  const clearError = () => {\n    setError(Error.None);\n  };\n\n  const loadPostsOfUser = (userId: number) => {\n    setIsPostLoading(true);\n    setIsPostLoaded(false);\n    getPosts(userId)\n      .then(res => {\n        setPosts(res);\n        setIsPostLoaded(true);\n\n        if (!res.length) {\n          setError(Error.NoPostsError);\n          setIsPostLoaded(false);\n        }\n      })\n      .catch(() => {\n        setError(Error.PostsLoadingError);\n        setPosts([]);\n      })\n      .finally(() => {\n        setIsPostLoading(false);\n      });\n  };\n\n  useEffect(() => {\n    getUsers()\n      .then(res => setUsers(res))\n      .catch(() => {\n        setUsers([]);\n      });\n  }, []);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  selectedUserId={selectedUserId}\n                  setSelectedUserId={selectUserId}\n                  loadPostsOfUser={loadPostsOfUser}\n                  clearError={clearError}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUserId && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n                {isPostsLoading && <Loader />}\n\n                {error === Error.PostsLoadingError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {error === Error.NoPostsError && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n\n                {isPostsLoaded && (\n                  <PostsList\n                    posts={posts}\n                    openPost={openPost}\n                    openedPostId={openedPostId}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          {openedPostId && (\n            <div\n              data-cy=\"Sidebar\"\n              className=\"tile is-parent is-8-desktop Sidebar Sidebar--open\"\n            >\n              <div className=\"tile is-child box is-success \">\n                {openedPost && (\n                  <PostDetails\n                    openedPost={openedPost}\n                  />\n                )}\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { Post } from './types/Post';\nimport { User } from './types/User';\nimport { client } from './utils/fetchClient';\nimport { Comment } from './types/Comment';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const postComment = (comm: Omit<Comment, 'id'>) => {\n  return client.post<Comment>('/comments', comm);\n};\n\nexport const deleteComment = (comId: number) => {\n  return client.delete(`/comments/${comId}`);\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[],\n  selectedUserId: number | null,\n  setSelectedUserId: (id: number) => void,\n  loadPostsOfUser: (userId: number) => void,\n  clearError: () => void,\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  selectedUserId,\n  setSelectedUserId,\n  loadPostsOfUser,\n  clearError,\n}) => {\n  const [isDropdownActive, setIsDropdownActive] = useState(false);\n  const [selectedUserName, setSelectedUserName] = useState('Choose a user');\n\n  const onClickDropdown = () => {\n    setIsDropdownActive(prev => !prev);\n  };\n\n  const onChooseUser = (id: number, name: string) => {\n    setSelectedUserId(id);\n    setSelectedUserName(name);\n    setIsDropdownActive(false);\n    loadPostsOfUser(id);\n    clearError();\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames(\n        'dropdown',\n        { 'is-active': isDropdownActive },\n      )}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={onClickDropdown}\n        >\n          <span>{selectedUserName}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div\n        className=\"dropdown-menu\"\n        id=\"dropdown-menu\"\n        role=\"menu\"\n        hidden={isDropdownActive}\n      >\n        <div className=\"dropdown-content\">\n          {users.map(user => (\n            <a\n              href={`#user-${user.id}`}\n              className={classNames(\n                'dropdown-item',\n                { 'is-active': user.id === selectedUserId },\n              )}\n              key={user.id}\n              onClick={() => onChooseUser(user.id, user.name)}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}